// timer.js

//1) setTimeout(콜백함수, 밀리초) ---------------------------------------------------------------------------------
setTimeout(() => {
  console.log("1초 후에 실행됩니다.");
}, 1000);

//2) setInterval(콜백함수, 밀리초) 무한실행 -----------------------------------------------------------------------
const interval = setInterval(() => {
  console.log("매 1초 단위로 실행됩니다.");
}, 1000);

// ctrl + c를 하면 무한실행되는 것을 빠져나올 수도 있지만, 이 함수단에서 종료를 해주고자 한다면
// const interval 변수에 이걸 집어 넣고 clearInterval()안에 종료할 변수를 넣어주면 된다.
// 그런데 그냥 작성을 하면 interval은 1초뒤에 실행이 되는데 clearinterval()함수가 먼저 실행되어버려서
// 단한번도 실행이 안되는 문제점이 발생하니 setTimeout()함수 안에 넣어줘야한다.
setTimeout(() => {
  clearInterval(interval);
}, 5000);

//3) setImmediate(콜백함수) ----------------------------------------------------------------------------------------
// Immdediate: 즉각적인 이라는 뜻때문에 바로 실행이 될 것 같지만,
// 이 함수 호출 뒤에 오는 모든 코드가 먼저 실행된 후에 바로 다음에 실행된다.
setImmediate(() => {
  console.log("코드 실행후 실행."); //이벤트루프 stack에 작업을 완료 -> queue에 있는 작업을 실행하기 전에 실행이 됨.
});
let sum = 0;
for (let i = 0; i < 999999; i++) {
  sum += i;
}
console.log("sum=>" + sum);
